'''
Testing the VM Vulnerabilities endpoints actions
'''
import responses
from requests import Response
from responses import matchers

from tenable.io.v3.base.iterators.explore_iterator import (CSVChunkIterator,
                                                           SearchIterator)

VUL_BASE_URL = r'https://cloud.tenable.com/api/v3/findings/vulnerabilities'
BASE_URL = r'https://cloud.tenable.com/api/v3'


@responses.activate
def test_import_vulnerability(api):
    '''
    Test to validate Import Vulnerability action
    '''
    vendor = 'tenable'
    product = 'tenable.io'
    data_type = 'vm'
    source = ('75c6c4c3-1626-4b57-9095-71b58ff8999e:'
              'e9b89d18-87cc-4fd5-8e6f-27a1d24fa2ac0')
    assets = [{
        'network_interfaces': [{
            'ipv4': ['192.0.2.57', '192.0.2.177']
        }],
        'hostname': 'windsmb.server.example.com',
        'bios_uuid': '9c60da51-762a-4b9b-8504-411056c2f696',
        'netbios_name': 'JUPITER',
        'vulnerabilities': [{
            'tenable_plugin_id': '97737',
            'last_found': 1568086236,
            'output': ('Description: The remote Windows host is '
                       'missing a security update.')
        }]
    }]
    coverage = '24531,76010-76023,88107'

    payload = {
        'vendor': vendor,
        'data_type': data_type,
        'source': source,
        'assets': assets,
        'product': product,
        'coverage': {'ids': coverage}
    }
    responses.add(
        responses.POST,
        f'{BASE_URL}/findings/types/host',
        match=[matchers.json_params_matcher(payload)],
        json={'job_uuid': ''}
    )
    resp = api.v3.vm.vulnerabilities.import_vulnerability(vendor=vendor,
                                                          product=product,
                                                          data_type=data_type,
                                                          source=source,
                                                          assets=assets,
                                                          coverage=coverage
                                                          )
    assert resp == {'job_uuid': ''}


@responses.activate
def test_search(api):
    '''
    Test the search functionality of Vulnerability API
    '''
    fields = [
        'asset.name',
        'severity',
        'name',
        'plugin_id',
        'family',
        'port',
        'protocol',
        'vpr',
        'state',
        'last_observed',
        'id'
    ]
    sort = [("definition.id", "desc")]

    sort_payload = [
        {
            "property": "definition.id",
            "order": "desc"
        }
    ]
    payload = {
        'fields': fields,
        'limit': 200,
        "sort": sort_payload
    }

    api_response = {
        'findings': [{
            'id': '00089a45-44a5-4620-bf9f-75ebedc6cc6c',
            'asset': {
                'name': 'vcsa123.target.tenablesecurity.com'
            },
            'definition': {
                'id': 91599,
                'name': 'Patch Report',
                'family': 'General',
                'severity': 0,
                'vpr': {},
                'cvss2': {},
                'cvss3': {},
                'references': [],
                'exploit_frameworks': []
            },
            'severity': 0,
            'state': 'ACTIVE',
            'last_observed': '2021-11-02T13:51:20Z',
            'protocol': 'TCP',
            'port': 0,
            'scan': {}
        }, {
            'id': '000d8829-6063-4296-90d7-560d982502ee',
            'asset': {
                'name': 'win2012r2'
            },
            'definition': {
                'id': 91596,
                'name': 'MS16-063: Cumulative Security Update (3163649)',
                'family': 'Windows : Microsoft Bulletins',
                'severity': 3,
                'vpr': {
                    'score': 9.2
                },
                'cvss2': {},
                'cvss3': {},
                'references': [],
                'exploit_frameworks': []
            },
            'severity': 3,
            'state': 'ACTIVE',
            'last_observed': '2021-11-02T13:51:20Z',
            'protocol': 'TCP',
            'port': 445,
            'scan': {}
        }],
        'pagination': {
            'total': 2,
            'next': 'nextToken'
        }
    }
    responses.add(
        responses.POST,
        f'{VUL_BASE_URL}/host/search',
        match=[matchers.json_params_matcher(payload)],
        json=api_response
    )

    iterator = api.v3.vm.vulnerabilities.search(
        fields=fields, limit=200, sort=sort
    )
    assert isinstance(iterator, SearchIterator)
    assert len(list(iterator)) == api_response['pagination']['total']

    iterator = api.v3.vm.vulnerabilities.search(
        fields=fields, return_csv=True, sort=sort
    )
    assert isinstance(iterator, CSVChunkIterator)

    resp = api.v3.vm.vulnerabilities.search(
        fields=fields, return_resp=True, limit=200, sort=sort
    )
    assert isinstance(resp, Response)
