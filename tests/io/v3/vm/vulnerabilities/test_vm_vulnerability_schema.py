'''
Testing the Vulnerability Schema
'''
import pytest
from marshmallow import ValidationError

from tenable.io.v3.vm.vulnerabilities.schema import (
    AssetObjectSchema, NetworkInterfaceObjectSchema, VulnerabilityObjectSchema,
    VulnerabilitySchema)
from tests.io.v3.vm.vulnerabilities.objects import (
    NEGATIVE_ASSET_OBJECT_SCHEMA, NEGATIVE_NETWORK_INTERFACE_OBJECT_SCHEMA,
    NEGATIVE_VULNERABILITY_OBJECT_SCHEMA, NEGATIVE_VULNERABILITY_SCHEMA)

vulnerability_object_schema = VulnerabilityObjectSchema()
vulnerability_schema = VulnerabilitySchema()
network_interface_object_schema = NetworkInterfaceObjectSchema()
asset_object_schema = AssetObjectSchema()


def test_schema():
    '''
    Tests the Schema for Vulnerability API
    '''

    vendor = 'tenable'
    product = 'tenable.io'
    data_type = 'vm'
    source = ('75c6c4c3-1626-4b57-9095-71b58ff8999e:'
              'e9b89d18-87cc-4fd5-8e6f-27a1d24fa2ac0')
    assets = [{
        'network_interfaces': [{
            'ipv4': ['192.0.2.57', '192.0.2.177']
        }],
        'hostname': 'windsmb.server.example.com',
        'bios_uuid': '9c60da51-762a-4b9b-8504-411056c2f696',
        'netbios_name': 'JUPITER',
        'vulnerabilities': [{
            'tenable_plugin_id': '97737',
            'last_found': 1568086236,
            'output': ('Description: The remote Windows host is '
                       'missing a security update.')
        }]
    }]
    coverage = '24531,76010-76023,88107'

    data = {
        'vendor': vendor,
        'data_type': data_type,
        'source': source,
        'assets': assets,
        'product': product,
        'coverage': coverage
    }

    assert vulnerability_schema.dump(vulnerability_schema.load(data)) == data


@pytest.mark.parametrize("test_input", NEGATIVE_VULNERABILITY_OBJECT_SCHEMA)
def test_vulnerability_object_schema_negative(test_input):
    with pytest.raises(ValidationError):
        vulnerability_object_schema.load(test_input)


@pytest.mark.parametrize(
    "test_input", NEGATIVE_NETWORK_INTERFACE_OBJECT_SCHEMA
)
def test_network_interface_object_schema_negative(test_input):
    with pytest.raises(ValidationError):
        network_interface_object_schema.load(test_input)


@pytest.mark.parametrize("test_input", NEGATIVE_ASSET_OBJECT_SCHEMA)
def test_asset_object_schema_negative(test_input):
    with pytest.raises(ValidationError):
        asset_object_schema.load(test_input)


@pytest.mark.parametrize("test_input", NEGATIVE_VULNERABILITY_SCHEMA)
def test_vulnerability_schema_negative(test_input):
    with pytest.raises(ValidationError):
        vulnerability_schema.load(test_input)
